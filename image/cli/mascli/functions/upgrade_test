#!/bin/bash

function upgrade_test_help() {
    [[ -n "$1" ]] && echo_warning "$1"
    reset_colors
    cat <<EOM
Usage:
  mas upgrade [options]
Where ${COLOR_YELLOW}specified${TEXT_RESET} each option may also be defined by setting the appropriate environment variable.
When no options are specified on the command line, interactive-mode will be enabled by default.

MAS Instance Selection (Required):
  -i, --id ${COLOR_YELLOW}MAS_INSTANCE_ID${TEXT_RESET}     MAS Instance ID to upgrade

Other Commands:
      --no-confirm                      Mirror images without prompting for confirmation
  -h, --help                            Show this help message
EOM
    [[ -n "$1" ]] && exit 1 || exit 0
}

parse_upgrade_matrix_yaml() {
    local prefix=$2
    local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @ | tr @ '\034')
    sed "h;s/^[^:]*//;x;s/:.*$//;y/./_/;G;s/\n//" $1 |
        sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
            -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p" |
        awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}

function upgrade_test_noninteractive() {
    while [[ $# -gt 0 ]]; do
        key="$1"
        shift
        case $key in
        -i | --id)
            MAS_INSTANCE_ID=$1 && shift
            ;;
        --no-confirm)
            NO_CONFIRM=true
            ;;
        -h | --help)
            upgrade_help
            ;;
        *)
            # unknown option
            echo -e "${COLOR_RED}Usage Error: Unsupported option \"${key}\"${COLOR_RESET}\n"
            upgrade_test_help
            exit 1
            ;;
        esac
    done

    # Check all args have been set
    [[ -z "$MAS_INSTANCE_ID" ]] && upgrade_test_help "MAS_INSTANCE_ID is not set"
}

function upgrade_test_interactive() {

    echo
    echo_h2 "Select IBM Maximo Application Suite Upgrade"

    prompt_for_input "MAS Instance ID" MAS_INSTANCE_ID

    # echo -e "${COLOR_YELLOW}MAS Version:"
    # echo "  1. 8.8.x"
    # echo "  2. 8.7.x"
    # prompt_for_input "Select MAS Version" MAS_CHANNEL_SELECTION "1"

    # case $MAS_CHANNEL_SELECTION in
    #   1|8.8|8.8.x)
    #     MAS_CHANNEL=8.8.x
    #     ;;
    #   2|8.7|8.7.x)
    #     MAS_CHANNEL=8.7.x
    #     ;;
    #   *)
    #     echo_warning "Invalid selection"
    #     exit 1
    #     ;;
    # esac
}

function upgrade_test() {
    # Take the first parameter off (it will be mirror-images)
    shift
    if [[ $# -gt 0 ]]; then
        upgrade_test_noninteractive "$@"
    else
        upgrade_test_interactive
    fi
    connect
    export MAS_CATALOG_VERSION
    export MAS_CHANNEL=""
    echo
    reset_colors
    echo_h2 "Review Settings"

    echo "${TEXT_DIM}"
    echo_h2 "Maximo Application Suite" "    "
    echo_reset_dim "Instance ID ..................... ${COLOR_MAGENTA}${MAS_INSTANCE_ID}"
    #echo_reset_dim "Target Channel ..................... ${COLOR_MAGENTA}${MAS_CHANNEL}"

    echo
    reset_colors
    if [[ "$NO_CONFIRM" != "true" ]]; then
        prompt_for_confirm "Proceed with these settings" || exit 0
    fi

    EXISTING_MAS_CHANNEL=$(oc get subs ibm-mas-operator -n mas-$MAS_INSTANCE_ID-core --output jsonpath='{.spec.channel}')
    if [[ -z "$EXISTING_MAS_CHANNEL" ]]; then
        echo_h2 "Selected instance $MAS_INSTANCE_ID does not exist.Please input gain"

        prompt_for_input "MAS Instance ID" MAS_INSTANCE_ID
        EXISTING_MAS_CHANNEL=$(oc get subs ibm-mas-operator -n mas-$MAS_INSTANCE_ID-core --output jsonpath='{.spec.channel}')
        if [[ -z "$EXISTING_MAS_CHANNEL" ]]; then
            echo_h2 "Selected instance $MAS_INSTANCE_ID does not exist."
            exit 1
        fi
    fi

    echo "existing mas_channel: $EXISTING_MAS_CHANNEL"

    FILE=$DIR/templates/upgrade_test_matrix.yaml
    if [ -f "$FILE" ]; then
        eval $(parse_upgrade_matrix_yaml $FILE)
        RESULT=${EXISTING_MAS_CHANNEL//[.]/_}
        UPGRADED_PATH="upgrade_path"
        UPGRADED_MAS_CHANNEL="upgrade_path_${RESULT}"

        echo
        prompt_for_input "Enter Target MAS channel" INPUT_MAS_CHANNEL
        if [[ $INPUT_MAS_CHANNEL != "${!UPGRADED_MAS_CHANNEL}" ]]; then
            echo "Mas channel can not be upgraded with ${INPUT_MAS_CHANNEL} .It can only be upgraded with:"
            echo "  FROM: TO"
            echo "$(sed -e '1,/upgrade_path/ d' $FILE)"
            exit 1
        fi
        echo "upgrading with mas_channel: ${!UPGRADED_MAS_CHANNEL}"
        if [[ -z "${!UPGRADED_MAS_CHANNEL}" ]]; then
            echo "Upgrade path for mas channel: ${EXISTING_MAS_CHANNEL} is not available "
            exit 1
        else
            export MAS_CHANNEL="${!UPGRADED_MAS_CHANNEL}"

        fi

    fi
    echo
    EXISTING_UPGRADE_PIPLINE=$(oc -n mas-$MAS_INSTANCE_ID-pipelines get pipelines mas-upgrade -o jsonpath='{.metadata.name}')

    if [[ -z "$EXISTING_UPGRADE_PIPLINE" ]]; then
        echo_h2 "mas-upgrade pipeline does not exist in mas instance $MAS_INSTANCE_ID."
        exit 1
    fi
    echo
    echo_h2 "Launch Upgrade with ${MAS_CHANNEL}"

    #   # Create namespace, install MAS Tekton definitions, configure RBAC
    #   pipeline_install_tasks || exit 1

    #   # Replace ALL environment variables in templates
    #   eval "echo \"$(cat $DIR/templates/pipelinerun-upgrade.yaml)\"" > $CONFIG_DIR/pipelinerun-$MAS_INSTANCE_ID-upgrade.yaml

    #   # Start pipeline execution
    #   oc -n mas-$MAS_INSTANCE_ID-pipelines create -f $CONFIG_DIR/pipelinerun-$MAS_INSTANCE_ID-upgrade.yaml &>> $LOGFILE || exit 1
    #   echo -e "${COLOR_GREEN}Upgrade started successfully${COLOR_RESET}"
    #   echo -e "\nView progress:\n  ${COLOR_CYAN}${TEXT_UNDERLINE}https://${OCP_CONSOLE_ROUTE}/pipelines/ns/mas-$MAS_INSTANCE_ID-pipelines${TEXT_RESET}${COLOR_RESET}"
    # echo

}
